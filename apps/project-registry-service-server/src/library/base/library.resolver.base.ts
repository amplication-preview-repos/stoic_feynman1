/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Library } from "./Library";
import { LibraryCountArgs } from "./LibraryCountArgs";
import { LibraryFindManyArgs } from "./LibraryFindManyArgs";
import { LibraryFindUniqueArgs } from "./LibraryFindUniqueArgs";
import { CreateLibraryArgs } from "./CreateLibraryArgs";
import { UpdateLibraryArgs } from "./UpdateLibraryArgs";
import { DeleteLibraryArgs } from "./DeleteLibraryArgs";
import { SoftwareProjectFindManyArgs } from "../../softwareProject/base/SoftwareProjectFindManyArgs";
import { SoftwareProject } from "../../softwareProject/base/SoftwareProject";
import { LibraryService } from "../library.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Library)
export class LibraryResolverBase {
  constructor(
    protected readonly service: LibraryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Library",
    action: "read",
    possession: "any",
  })
  async _librariesMeta(
    @graphql.Args() args: LibraryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Library])
  @nestAccessControl.UseRoles({
    resource: "Library",
    action: "read",
    possession: "any",
  })
  async libraries(
    @graphql.Args() args: LibraryFindManyArgs
  ): Promise<Library[]> {
    return this.service.libraries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Library, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Library",
    action: "read",
    possession: "own",
  })
  async library(
    @graphql.Args() args: LibraryFindUniqueArgs
  ): Promise<Library | null> {
    const result = await this.service.library(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Library)
  @nestAccessControl.UseRoles({
    resource: "Library",
    action: "create",
    possession: "any",
  })
  async createLibrary(
    @graphql.Args() args: CreateLibraryArgs
  ): Promise<Library> {
    return await this.service.createLibrary({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Library)
  @nestAccessControl.UseRoles({
    resource: "Library",
    action: "update",
    possession: "any",
  })
  async updateLibrary(
    @graphql.Args() args: UpdateLibraryArgs
  ): Promise<Library | null> {
    try {
      return await this.service.updateLibrary({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Library)
  @nestAccessControl.UseRoles({
    resource: "Library",
    action: "delete",
    possession: "any",
  })
  async deleteLibrary(
    @graphql.Args() args: DeleteLibraryArgs
  ): Promise<Library | null> {
    try {
      return await this.service.deleteLibrary(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SoftwareProject], { name: "softwareProjects" })
  @nestAccessControl.UseRoles({
    resource: "SoftwareProject",
    action: "read",
    possession: "any",
  })
  async findSoftwareProjects(
    @graphql.Parent() parent: Library,
    @graphql.Args() args: SoftwareProjectFindManyArgs
  ): Promise<SoftwareProject[]> {
    const results = await this.service.findSoftwareProjects(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
