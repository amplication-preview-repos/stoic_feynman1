/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Component as PrismaComponent,
  SoftwareProject as PrismaSoftwareProject,
} from "@prisma/client";

export class ComponentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComponentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.component.count(args);
  }

  async components(
    args: Prisma.ComponentFindManyArgs
  ): Promise<PrismaComponent[]> {
    return this.prisma.component.findMany(args);
  }
  async component(
    args: Prisma.ComponentFindUniqueArgs
  ): Promise<PrismaComponent | null> {
    return this.prisma.component.findUnique(args);
  }
  async createComponent(
    args: Prisma.ComponentCreateArgs
  ): Promise<PrismaComponent> {
    return this.prisma.component.create(args);
  }
  async updateComponent(
    args: Prisma.ComponentUpdateArgs
  ): Promise<PrismaComponent> {
    return this.prisma.component.update(args);
  }
  async deleteComponent(
    args: Prisma.ComponentDeleteArgs
  ): Promise<PrismaComponent> {
    return this.prisma.component.delete(args);
  }

  async findSoftwareProjects(
    parentId: string,
    args: Prisma.SoftwareProjectFindManyArgs
  ): Promise<PrismaSoftwareProject[]> {
    return this.prisma.component
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .softwareProjects(args);
  }
}
