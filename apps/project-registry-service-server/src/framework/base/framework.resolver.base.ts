/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Framework } from "./Framework";
import { FrameworkCountArgs } from "./FrameworkCountArgs";
import { FrameworkFindManyArgs } from "./FrameworkFindManyArgs";
import { FrameworkFindUniqueArgs } from "./FrameworkFindUniqueArgs";
import { CreateFrameworkArgs } from "./CreateFrameworkArgs";
import { UpdateFrameworkArgs } from "./UpdateFrameworkArgs";
import { DeleteFrameworkArgs } from "./DeleteFrameworkArgs";
import { SoftwareProjectFindManyArgs } from "../../softwareProject/base/SoftwareProjectFindManyArgs";
import { SoftwareProject } from "../../softwareProject/base/SoftwareProject";
import { FrameworkService } from "../framework.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Framework)
export class FrameworkResolverBase {
  constructor(
    protected readonly service: FrameworkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Framework",
    action: "read",
    possession: "any",
  })
  async _frameworksMeta(
    @graphql.Args() args: FrameworkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Framework])
  @nestAccessControl.UseRoles({
    resource: "Framework",
    action: "read",
    possession: "any",
  })
  async frameworks(
    @graphql.Args() args: FrameworkFindManyArgs
  ): Promise<Framework[]> {
    return this.service.frameworks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Framework, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Framework",
    action: "read",
    possession: "own",
  })
  async framework(
    @graphql.Args() args: FrameworkFindUniqueArgs
  ): Promise<Framework | null> {
    const result = await this.service.framework(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Framework)
  @nestAccessControl.UseRoles({
    resource: "Framework",
    action: "create",
    possession: "any",
  })
  async createFramework(
    @graphql.Args() args: CreateFrameworkArgs
  ): Promise<Framework> {
    return await this.service.createFramework({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Framework)
  @nestAccessControl.UseRoles({
    resource: "Framework",
    action: "update",
    possession: "any",
  })
  async updateFramework(
    @graphql.Args() args: UpdateFrameworkArgs
  ): Promise<Framework | null> {
    try {
      return await this.service.updateFramework({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Framework)
  @nestAccessControl.UseRoles({
    resource: "Framework",
    action: "delete",
    possession: "any",
  })
  async deleteFramework(
    @graphql.Args() args: DeleteFrameworkArgs
  ): Promise<Framework | null> {
    try {
      return await this.service.deleteFramework(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SoftwareProject], { name: "softwareProjects" })
  @nestAccessControl.UseRoles({
    resource: "SoftwareProject",
    action: "read",
    possession: "any",
  })
  async findSoftwareProjects(
    @graphql.Parent() parent: Framework,
    @graphql.Args() args: SoftwareProjectFindManyArgs
  ): Promise<SoftwareProject[]> {
    const results = await this.service.findSoftwareProjects(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
