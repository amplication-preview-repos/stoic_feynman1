/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Framework as PrismaFramework,
  SoftwareProject as PrismaSoftwareProject,
} from "@prisma/client";

export class FrameworkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FrameworkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.framework.count(args);
  }

  async frameworks(
    args: Prisma.FrameworkFindManyArgs
  ): Promise<PrismaFramework[]> {
    return this.prisma.framework.findMany(args);
  }
  async framework(
    args: Prisma.FrameworkFindUniqueArgs
  ): Promise<PrismaFramework | null> {
    return this.prisma.framework.findUnique(args);
  }
  async createFramework(
    args: Prisma.FrameworkCreateArgs
  ): Promise<PrismaFramework> {
    return this.prisma.framework.create(args);
  }
  async updateFramework(
    args: Prisma.FrameworkUpdateArgs
  ): Promise<PrismaFramework> {
    return this.prisma.framework.update(args);
  }
  async deleteFramework(
    args: Prisma.FrameworkDeleteArgs
  ): Promise<PrismaFramework> {
    return this.prisma.framework.delete(args);
  }

  async findSoftwareProjects(
    parentId: string,
    args: Prisma.SoftwareProjectFindManyArgs
  ): Promise<PrismaSoftwareProject[]> {
    return this.prisma.framework
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .softwareProjects(args);
  }
}
