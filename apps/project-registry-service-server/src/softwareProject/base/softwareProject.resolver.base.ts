/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SoftwareProject } from "./SoftwareProject";
import { SoftwareProjectCountArgs } from "./SoftwareProjectCountArgs";
import { SoftwareProjectFindManyArgs } from "./SoftwareProjectFindManyArgs";
import { SoftwareProjectFindUniqueArgs } from "./SoftwareProjectFindUniqueArgs";
import { CreateSoftwareProjectArgs } from "./CreateSoftwareProjectArgs";
import { UpdateSoftwareProjectArgs } from "./UpdateSoftwareProjectArgs";
import { DeleteSoftwareProjectArgs } from "./DeleteSoftwareProjectArgs";
import { Certificate } from "../../certificate/base/Certificate";
import { Component } from "../../component/base/Component";
import { Framework } from "../../framework/base/Framework";
import { Library } from "../../library/base/Library";
import { LicenseSubscription } from "../../licenseSubscription/base/LicenseSubscription";
import { Technology } from "../../technology/base/Technology";
import { SoftwareProjectService } from "../softwareProject.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SoftwareProject)
export class SoftwareProjectResolverBase {
  constructor(
    protected readonly service: SoftwareProjectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SoftwareProject",
    action: "read",
    possession: "any",
  })
  async _softwareProjectsMeta(
    @graphql.Args() args: SoftwareProjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SoftwareProject])
  @nestAccessControl.UseRoles({
    resource: "SoftwareProject",
    action: "read",
    possession: "any",
  })
  async softwareProjects(
    @graphql.Args() args: SoftwareProjectFindManyArgs
  ): Promise<SoftwareProject[]> {
    return this.service.softwareProjects(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SoftwareProject, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SoftwareProject",
    action: "read",
    possession: "own",
  })
  async softwareProject(
    @graphql.Args() args: SoftwareProjectFindUniqueArgs
  ): Promise<SoftwareProject | null> {
    const result = await this.service.softwareProject(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SoftwareProject)
  @nestAccessControl.UseRoles({
    resource: "SoftwareProject",
    action: "create",
    possession: "any",
  })
  async createSoftwareProject(
    @graphql.Args() args: CreateSoftwareProjectArgs
  ): Promise<SoftwareProject> {
    return await this.service.createSoftwareProject({
      ...args,
      data: {
        ...args.data,

        certificate: args.data.certificate
          ? {
              connect: args.data.certificate,
            }
          : undefined,

        component: args.data.component
          ? {
              connect: args.data.component,
            }
          : undefined,

        framework: args.data.framework
          ? {
              connect: args.data.framework,
            }
          : undefined,

        library: args.data.library
          ? {
              connect: args.data.library,
            }
          : undefined,

        licenseSubscription: args.data.licenseSubscription
          ? {
              connect: args.data.licenseSubscription,
            }
          : undefined,

        technology: args.data.technology
          ? {
              connect: args.data.technology,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SoftwareProject)
  @nestAccessControl.UseRoles({
    resource: "SoftwareProject",
    action: "update",
    possession: "any",
  })
  async updateSoftwareProject(
    @graphql.Args() args: UpdateSoftwareProjectArgs
  ): Promise<SoftwareProject | null> {
    try {
      return await this.service.updateSoftwareProject({
        ...args,
        data: {
          ...args.data,

          certificate: args.data.certificate
            ? {
                connect: args.data.certificate,
              }
            : undefined,

          component: args.data.component
            ? {
                connect: args.data.component,
              }
            : undefined,

          framework: args.data.framework
            ? {
                connect: args.data.framework,
              }
            : undefined,

          library: args.data.library
            ? {
                connect: args.data.library,
              }
            : undefined,

          licenseSubscription: args.data.licenseSubscription
            ? {
                connect: args.data.licenseSubscription,
              }
            : undefined,

          technology: args.data.technology
            ? {
                connect: args.data.technology,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SoftwareProject)
  @nestAccessControl.UseRoles({
    resource: "SoftwareProject",
    action: "delete",
    possession: "any",
  })
  async deleteSoftwareProject(
    @graphql.Args() args: DeleteSoftwareProjectArgs
  ): Promise<SoftwareProject | null> {
    try {
      return await this.service.deleteSoftwareProject(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Certificate, {
    nullable: true,
    name: "certificate",
  })
  @nestAccessControl.UseRoles({
    resource: "Certificate",
    action: "read",
    possession: "any",
  })
  async getCertificate(
    @graphql.Parent() parent: SoftwareProject
  ): Promise<Certificate | null> {
    const result = await this.service.getCertificate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Component, {
    nullable: true,
    name: "component",
  })
  @nestAccessControl.UseRoles({
    resource: "Component",
    action: "read",
    possession: "any",
  })
  async getComponent(
    @graphql.Parent() parent: SoftwareProject
  ): Promise<Component | null> {
    const result = await this.service.getComponent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Framework, {
    nullable: true,
    name: "framework",
  })
  @nestAccessControl.UseRoles({
    resource: "Framework",
    action: "read",
    possession: "any",
  })
  async getFramework(
    @graphql.Parent() parent: SoftwareProject
  ): Promise<Framework | null> {
    const result = await this.service.getFramework(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Library, {
    nullable: true,
    name: "library",
  })
  @nestAccessControl.UseRoles({
    resource: "Library",
    action: "read",
    possession: "any",
  })
  async getLibrary(
    @graphql.Parent() parent: SoftwareProject
  ): Promise<Library | null> {
    const result = await this.service.getLibrary(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => LicenseSubscription, {
    nullable: true,
    name: "licenseSubscription",
  })
  @nestAccessControl.UseRoles({
    resource: "LicenseSubscription",
    action: "read",
    possession: "any",
  })
  async getLicenseSubscription(
    @graphql.Parent() parent: SoftwareProject
  ): Promise<LicenseSubscription | null> {
    const result = await this.service.getLicenseSubscription(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Technology, {
    nullable: true,
    name: "technology",
  })
  @nestAccessControl.UseRoles({
    resource: "Technology",
    action: "read",
    possession: "any",
  })
  async getTechnology(
    @graphql.Parent() parent: SoftwareProject
  ): Promise<Technology | null> {
    const result = await this.service.getTechnology(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
