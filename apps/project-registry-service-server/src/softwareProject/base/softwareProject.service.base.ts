/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SoftwareProject as PrismaSoftwareProject,
  Certificate as PrismaCertificate,
  Component as PrismaComponent,
  Framework as PrismaFramework,
  Library as PrismaLibrary,
  LicenseSubscription as PrismaLicenseSubscription,
  Technology as PrismaTechnology,
} from "@prisma/client";

export class SoftwareProjectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SoftwareProjectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.softwareProject.count(args);
  }

  async softwareProjects(
    args: Prisma.SoftwareProjectFindManyArgs
  ): Promise<PrismaSoftwareProject[]> {
    return this.prisma.softwareProject.findMany(args);
  }
  async softwareProject(
    args: Prisma.SoftwareProjectFindUniqueArgs
  ): Promise<PrismaSoftwareProject | null> {
    return this.prisma.softwareProject.findUnique(args);
  }
  async createSoftwareProject(
    args: Prisma.SoftwareProjectCreateArgs
  ): Promise<PrismaSoftwareProject> {
    return this.prisma.softwareProject.create(args);
  }
  async updateSoftwareProject(
    args: Prisma.SoftwareProjectUpdateArgs
  ): Promise<PrismaSoftwareProject> {
    return this.prisma.softwareProject.update(args);
  }
  async deleteSoftwareProject(
    args: Prisma.SoftwareProjectDeleteArgs
  ): Promise<PrismaSoftwareProject> {
    return this.prisma.softwareProject.delete(args);
  }

  async getCertificate(parentId: string): Promise<PrismaCertificate | null> {
    return this.prisma.softwareProject
      .findUnique({
        where: { id: parentId },
      })
      .certificate();
  }

  async getComponent(parentId: string): Promise<PrismaComponent | null> {
    return this.prisma.softwareProject
      .findUnique({
        where: { id: parentId },
      })
      .component();
  }

  async getFramework(parentId: string): Promise<PrismaFramework | null> {
    return this.prisma.softwareProject
      .findUnique({
        where: { id: parentId },
      })
      .framework();
  }

  async getLibrary(parentId: string): Promise<PrismaLibrary | null> {
    return this.prisma.softwareProject
      .findUnique({
        where: { id: parentId },
      })
      .library();
  }

  async getLicenseSubscription(
    parentId: string
  ): Promise<PrismaLicenseSubscription | null> {
    return this.prisma.softwareProject
      .findUnique({
        where: { id: parentId },
      })
      .licenseSubscription();
  }

  async getTechnology(parentId: string): Promise<PrismaTechnology | null> {
    return this.prisma.softwareProject
      .findUnique({
        where: { id: parentId },
      })
      .technology();
  }
}
